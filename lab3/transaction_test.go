package main

import (
	"encoding/hex"
	"testing"

	//"fmt"
	"crypto/elliptic"
	"encoding/gob"

	"github.com/stretchr/testify/assert"
)

func TestNewUTXOTransaction(t *testing.T) {
	gob.Register(elliptic.P256())
	address, _ := hex.DecodeString("5154677941543348544752664633674a48514359376d6d56786d364e753655654d")
	bc := NewBlockchain()
	defer bc.Close()
	var utxoset UTXOSet
	utxoset.Blockchain = bc
	to, _ := hex.DecodeString("575358554b387950714e55696159566f6f6371767163766d533464457539574836")
	amount := 209999
	//fmt.Printf("%d", to)
	tx := NewUTXOTransaction(address, to, amount, &utxoset)
	//fmt.Printf("%d", tx)
	txid := []byte{0xa2, 0x83, 0xaa, 0xc1, 0x90, 0x45, 0x7f, 0xf0, 0x85, 0x45, 0x19, 0x3f, 0x1f, 0x56, 0x9e, 0xd9, 0x8, 0x36, 0xfa, 0x58, 0x30, 0x41, 0x48, 0x7c, 0x18, 0x9d, 0x8f, 0x4d, 0xa3, 0x1, 0x55, 0xa6}
	assert.Equal(t, tx.ID, txid, "newutxotransaction fails!")
	vintxid := []byte{0xb2, 0x94, 0xa1, 0xde, 0xc9, 0x8f, 0xbf, 0x6, 0xac, 0xe8, 0x1a, 0xe2, 0xd2, 0xf0, 0xe1, 0x8a, 0x56, 0x25, 0x78, 0x57, 0x3f, 0xb6, 0x4, 0x7c, 0xe6, 0x16, 0x54, 0x8d, 0x29, 0x4f, 0xfe, 0xbd}
	assert.Equal(t, tx.Vin[0].Txid, vintxid, "newutxotransaction fails!")
	assert.Equal(t, tx.Vin[0].Vout, 1, "newutxotransaction fails!")
	vinpbk := []byte{0x61, 0x1e, 0xf6, 0xca, 0xca, 0x1c, 0x4b, 0xf7, 0x87, 0xd6, 0xf5, 0x47, 0xad, 0x76, 0x6f, 0xe8, 0x2a, 0xe8, 0xed, 0x8f, 0xff, 0xe2, 0x61, 0xbf, 0x5c, 0x43, 0xfc, 0x2e, 0x28, 0x2d, 0x44, 0xe8, 0x57, 0x8b, 0x39, 0xf9, 0x79, 0xdf, 0xd2, 0x31, 0x5b, 0x24, 0x43, 0xb8, 0x62, 0x66, 0x26, 0x8, 0xeb, 0xe, 0xaf, 0xfa, 0x10, 0x20, 0x89, 0x4d, 0x63, 0xf2, 0x67, 0xd7, 0xb, 0xc2, 0xf, 0xb0}
	assert.Equal(t, tx.Vin[0].PubKey, vinpbk, "newutxotransaction fails!")
	assert.Equal(t, tx.Vout[0].Value, 209999, "newutxotransaction fails!")
	pbk := []byte{0x42, 0xef, 0x7b, 0x8c, 0x33, 0xdb, 0x9f, 0x3f, 0x12, 0x4b, 0x9e, 0xb8, 0x21, 0xad, 0xd1, 0x65, 0x16, 0x34, 0xff, 0xfe}
	assert.Equal(t, tx.Vout[0].PubKeyHash, pbk, "newutxotransaction fails!")
}
